{"version":3,"sources":["userdata.js"],"names":["mongoose","require","mongoDB","connect","useNewUrlParser","useUnifiedTopology","error","bind","console","db","once","uniqueValidator","Schema","firstname","type","String","trim","postSchema","v","length","message","lastname","required","validate","validator","email","test","props","concat","value","comment","plugin","Post","model"],"mappings":"aACA,IAAAA,SAAAC,QAAA,YAGIC,QAAU,2KACdF,SAASG,QAAQD,QAAS,CAAEE,iBAAiB,EAAMC,oBAAoB,IAAvEL,IAAAA,GAASG,SAAQD,WAAkCG,GAAAA,GAAAA,QAAAA,QAAoBC,MAAAC,KAAAC,QAAA,8BAMvEC,GAAGC,KAAK,OAAQ,WAJZD,QAAKT,IAAAA,sBAETS,IAAME,gBAAiBL,QAAMC,6BAGzBC,WAAY,IAAAR,SAAZY,OAAA,CADJC,UAAA,CAOQC,KAAMC,OAJRJ,SAAAA,yBAMEK,MAAM,EAJRC,SAAa,CACfJ,UAAW,SAAAK,GACDH,OADC,EAAAG,EAAAC,QAGDC,QAHC,WAAA,MAAA,kDAOJC,SAHO,CAIRD,KAAOL,OAAEO,SAAA,yBAAAN,MAAA,EAJDO,SAAA,CALqBC,UAAA,SAAAN,GAavB,OAAA,EAAAA,EAAAC,QAERG,QAAU,WAAA,MAAA,kDAKPG,MAHO,CAIRL,KAAOL,OAAEC,MAAA,EAAAO,SAAA,CAJDC,UAAA,SAAAN,GAjBqB,MAAA,4JAAAQ,KAAAR,IA2BzBH,QADD,SAAAY,GAAA,MAAA,GAAAC,OAAAD,EAAAE,MAAA,qCAKDC,QAAO,CAFAhB,KAAAC,OAITK,SAAS,+BAAAJ,MAAA,EAAAO,SAAA,CAJAC,UAAA,SAAAN,GA7BoB,OAAA,EAAAA,EAAAC,QAsCzBJ,QADC,WAAA,MAAA,oDAMHE,WAAAc,OAASZ,iBAEXC,OAAAA,QAASY,KAAAhC,SAAAiC,MAAA,OAAAhB","file":"userdata.min.js","sourcesContent":["\r\n// Require the mongoose module\r\nvar mongoose = require('mongoose');\r\n// Set up a mongoose connection\r\nvar mongoDB = \"mongodb+srv://mo:comon123@cluster0.c2uhk.mongodb.net/userdata?authSource=admin&replicaSet=atlas-rvxm88-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true\"\r\nmongoose.connect(mongoDB, { useNewUrlParser: true, useUnifiedTopology: true });\r\n// Get the connection\r\nvar db = mongoose.connection;\r\n// Bind connection to error event (to get notification of connection errors)\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n\r\ndb.once('open', function () {\r\n    console.log(\"we're connected!\")\r\n});\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    firstname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      \r\n      lastname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      \r\n      \r\n      email: {\r\n        type: String,\r\n        trim: true,\r\n         validate: {\r\n          validator: function (v) {\r\n            return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v);\r\n          },\r\n          message: (props) => `${props.value} is not a valid Email address.`,\r\n        },\r\n      },\r\n    \r\n      comment: {\r\n        type: String,\r\n        required: \"Please write your post body.\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },       \r\n    \r\n});\r\npostSchema.plugin(uniqueValidator);\r\n\r\nmodule.exports.Post = mongoose.model('Post', postSchema);"]}